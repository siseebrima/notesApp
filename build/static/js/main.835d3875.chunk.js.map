{"version":3,"sources":["components/Note.jsx","services/notes.js","components/Notification.jsx","components/Footer.jsx","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","noteService","getAll","request","axios","get","nonExisting","id","date","then","res","data","concat","create","newObject","post","update","put","req","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setnotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","initialData","catch","err","console","error","notesToShow","filter","map","find","n","changedNote","setTimeout","handleImportance","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.835d3875.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <div>\n      <li className=\"note\">\n        {note.content} <button onClick={toggleImportance}>{label}</button>\n      </li>\n    </div>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  return request.then((res) => res.data.concat(nonExisting));\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((res) => res.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((req) => req.data);\n};\n\nconst noteService = {\n  getAll,\n  create,\n  update,\n};\n\nexport default noteService;\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  return (\n    <div>\n      {message === null ? null : <div className=\"error\">{message}</div>}\n    </div>\n  );\n};\n\nexport default Notification;\n","import React from \"react\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, ebroTech</em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\n// import axios from \"axios\";\n\nconst App = (props) => {\n  const [notes, setnotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then((initialData) => {\n        // const data = res.data;\n        setnotes(initialData);\n      })\n      .catch((err) => console.error(err));\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    // console.log(`button clicked`, event.target);\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    };\n\n    noteService\n      .create(noteObject)\n      .then((initialData) => {\n        setnotes(notes.concat(initialData));\n        setNewNote(\"\");\n      })\n      .catch((err) => console.error(err));\n  };\n\n  const handleInput = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  const toggleHandler = () => {\n    setShowAll(!showAll);\n  };\n\n  const handleImportance = (id) => {\n    // console.log(\"importance of\", id, \"needs to be toggled\");\n    // const url = `http://10.1.1.162:3001/notes/${id}`;\n\n    const note = notes.find((n) => n.id === id);\n\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((initialData) => {\n        setnotes(notes.map((note) => (note.id !== id ? note : initialData)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n\n        setnotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={toggleHandler}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            note={note}\n            key={note.id}\n            toggleImportance={() => handleImportance(note.id)}\n            // label={note.important}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input type=\"text\" value={newNote} onChange={handleInput} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}